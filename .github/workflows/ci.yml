name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short --color=yes

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          .pytest_cache/
          htmlcov/

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better secret detection

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets truffleHog3

    - name: Run TruffleHog (Secret Scanner)
      run: |
        echo "🔍 Scanning for secrets with TruffleHog..."
        trufflehog3 --format json --no-history . > trufflehog_results.json || true
        
        # Check if any secrets were found
        if [ -s trufflehog_results.json ] && [ "$(cat trufflehog_results.json)" != "[]" ]; then
          echo "❌ TruffleHog found potential secrets!"
          cat trufflehog_results.json
          exit 1
        else
          echo "✅ TruffleHog: No secrets detected"
        fi

    - name: Run detect-secrets
      run: |
        echo "🔍 Scanning for secrets with detect-secrets..."
        detect-secrets scan --all-files --baseline .secrets.baseline || true
        
        # Run audit to check for new secrets
        if detect-secrets audit .secrets.baseline --diff; then
          echo "✅ detect-secrets: No new secrets found"
        else
          echo "❌ detect-secrets found potential secrets!"
          exit 1
        fi

    - name: Check for sensitive patterns in code
      run: |
        echo "🔍 Checking for sensitive patterns..."
        
        # Define patterns to search for
        PATTERNS=(
          "password\s*=\s*['\"][^'\"]{3,}"
          "token\s*=\s*['\"][^'\"]{10,}"
          "key\s*=\s*['\"][^'\"]{10,}"
          "secret\s*=\s*['\"][^'\"]{10,}"
          "api_key\s*=\s*['\"][^'\"]{10,}"
          "access_token\s*=\s*['\"][^'\"]{10,}"
          "client_secret\s*=\s*['\"][^'\"]{10,}"
          "[A-Za-z0-9+/]{40,}={0,2}"  # Base64 encoded strings
          "[0-9a-f]{32,64}"           # Hex encoded strings
          "sk-[A-Za-z0-9]{32,}"       # API keys starting with sk-
          "pk_[A-Za-z0-9]{32,}"       # Public keys starting with pk_
          "AIza[A-Za-z0-9]{35}"       # Google API keys
          "ya29\.[A-Za-z0-9_-]{68,}"  # Google OAuth tokens
        )
        
        FOUND_SECRETS=false
        
        for pattern in "${PATTERNS[@]}"; do
          echo "Checking pattern: $pattern"
          if grep -rE "$pattern" . \
            --exclude-dir=.venv \
            --exclude-dir=__pycache__ \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude-dir=.pytest_cache \
            --exclude="*.pyc" \
            --exclude="*.log" \
            --exclude="trufflehog_results.json" \
            --exclude=".secrets.baseline" | \
            grep -v "your_client_id_here\|your_client_secret_here\|seu_client_id_aqui\|seu_client_secret_aqui\|example\|placeholder\|XXXXXXXXX\|dummy"; then
            echo "❌ Potential secret found with pattern: $pattern"
            FOUND_SECRETS=true
          fi
        done
        
        if [ "$FOUND_SECRETS" = true ]; then
          echo "❌ Sensitive patterns detected in code!"
          exit 1
        else
          echo "✅ No sensitive patterns found"
        fi

    - name: Check for Spotify credentials in code
      run: |
        echo "🔍 Checking for Spotify credentials..."
        if grep -r "SPOTIFY_CLIENT_ID\|SPOTIFY_CLIENT_SECRET" . \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude-dir=.git \
          --exclude-dir=.pytest_cache \
          --exclude="*.pyc" | \
          grep -v "your_client_id_here\|your_client_secret_here\|seu_client_id_aqui\|seu_client_secret_aqui\|example\|placeholder\|SPOTIFY_CLIENT_ID=\|SPOTIFY_CLIENT_SECRET="; then
          echo "❌ Potential Spotify credentials found in code!"
          exit 1
        else
          echo "✅ No Spotify credentials found in code"
        fi

    - name: Check sensitive files are not committed
      run: |
        echo "🔍 Checking for sensitive files..."
        SENSITIVE_FILES=(
          ".env"
          ".env.local"
          ".env.production"
          ".env.development"
          ".spotify_token_cache"
          "*.pem"
          "*.key"
          "id_rsa"
          "id_dsa"
          "*.p12"
          "*.pfx"
          "credentials.json"
          "service-account.json"
        )
        
        FOUND_FILES=false
        
        for file_pattern in "${SENSITIVE_FILES[@]}"; do
          if find . -name "$file_pattern" -not -path "./.git/*" -not -path "./.venv/*" | grep -q .; then
            echo "❌ Sensitive file found: $file_pattern"
            find . -name "$file_pattern" -not -path "./.git/*" -not -path "./.venv/*"
            FOUND_FILES=true
          fi
        done
        
        if [ "$FOUND_FILES" = true ]; then
          echo "❌ Sensitive files detected!"
          exit 1
        else
          echo "✅ No sensitive files found"
        fi

    - name: Check .gitignore configuration
      run: |
        echo "🔍 Checking .gitignore configuration..."
        REQUIRED_PATTERNS=(
          "\.env"
          "\.env\."
          "\.spotify_token_cache"
          "\*\.key"
          "\*\.pem"
          "credentials\.json"
        )
        
        MISSING_PATTERNS=()
        
        for pattern in "${REQUIRED_PATTERNS[@]}"; do
          if ! grep -q "$pattern" .gitignore; then
            MISSING_PATTERNS+=("$pattern")
          fi
        done
        
        if [ ${#MISSING_PATTERNS[@]} -gt 0 ]; then
          echo "❌ .gitignore missing patterns:"
          printf '%s\n' "${MISSING_PATTERNS[@]}"
          exit 1
        else
          echo "✅ .gitignore properly configured"
        fi

    - name: Check for hardcoded URLs and endpoints
      run: |
        echo "🔍 Checking for hardcoded sensitive URLs..."
        if grep -rE "https?://[^/]*\.(amazonaws\.com|azure\.com|googleapis\.com)" . \
          --exclude-dir=.venv \
          --exclude-dir=__pycache__ \
          --exclude-dir=.git \
          --exclude="*.md" \
          --exclude="*.txt" | \
          grep -v "example\|placeholder\|docs\|documentation"; then
          echo "⚠️  Warning: Found cloud service URLs - verify they don't contain credentials"
        else
          echo "✅ No sensitive URLs found"
        fi

    - name: Generate security report
      if: always()
      run: |
        echo "📊 Security Scan Summary" > security_report.txt
        echo "========================" >> security_report.txt
        echo "Scan completed at: $(date)" >> security_report.txt
        echo "" >> security_report.txt
        
        if [ -f "trufflehog_results.json" ]; then
          echo "TruffleHog Results:" >> security_report.txt
          if [ "$(cat trufflehog_results.json)" = "[]" ]; then
            echo "✅ No secrets found" >> security_report.txt
          else
            echo "❌ Potential secrets detected" >> security_report.txt
          fi
        fi
        
        echo "" >> security_report.txt
        echo "Files scanned: $(find . -type f -not -path './.git/*' -not -path './.venv/*' | wc -l)" >> security_report.txt
        echo "Security checks: PASSED" >> security_report.txt
        
        cat security_report.txt

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trufflehog_results.json
          security_report.txt
          .secrets.baseline

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
